hc_add_theme(hc_theme_flat())
})
output$histPlot <- renderHighchart({
req(nrow(genre_filtered()) > 0)
breaks <- seq(floor(min(genre_filtered()$IMDB_Rating, na.rm=TRUE)),
ceiling(max(genre_filtered()$IMDB_Rating, na.rm=TRUE)), by = 0.2)
hist_data <- hist(genre_filtered()$IMDB_Rating, breaks = breaks, plot = FALSE)
custom_hist_colors <- viridis::viridis(length(hist_data$counts), option = "D", end = 0.85)
highchart() %>%
hc_chart(type = "column", backgroundColor = "#212226") %>%
hc_add_series(
data = hist_data$counts,
name = "Count",
colorByPoint = TRUE,
colors = custom_hist_colors,
borderColor = "none",
borderWidth = 0,
pointPadding = 0,
groupPadding = 0
) %>%
hc_xAxis(
categories = round(hist_data$mids, 2),
title = list(text = "IMDB Rating", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_yAxis(
title = list(text = "Count", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_title(text = paste("Rating Distribution for", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$piePlot <- renderHighchart({
neon_cols <- c(
"Excellent" = "#cc353c",
"Great"     = "#5e0414",
"Good"      = "#c701ae",
"Others"    = "#747474"
)
dist <- genre_filtered() %>%
count(Rating_Level, name = "y") %>%
arrange(factor(Rating_Level, levels = names(neon_cols))) %>%
mutate(
name  = Rating_Level,
color = neon_cols[Rating_Level]
)
highchart() %>%
hc_chart(type = "pie", backgroundColor = "#212226") %>%
hc_add_series(
data = list_parse(dist),
colorByPoint = FALSE,
borderColor = "none",
borderWidth = 0
) %>%
hc_title(
text  = paste("Rating Level Distribution in", input$genreInput),
style = list(color = "white")
) %>%
hc_add_theme(hc_theme_flat())
})
}
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(stringr)
library(highcharter)
library(viridis)
library(tidyr)
library(bslib)
# Helper: assign rating levels for pie chart
get_rating_level <- function(rating) {
if (rating >= 9) return("Excellent")
if (rating >= 8) return("Great")
if (rating >= 7) return("Good")
return("Others")
}
imdb$Rating_Level <- sapply(imdb$IMDB_Rating, get_rating_level)
# Unique genres for dropdown
all_genres <- sort(unique(unlist(strsplit(paste(imdb$Genre, collapse = ", "), ", "))))
ui <- fluidPage(
theme = bs_theme(
version = 5,
bootswatch = "flatly",
base_font = font_google("Roboto"),
primary = "#21908CFF"
),
tags$head(tags$style(HTML("
body { background: #16171c; }
.main-panel { background: #16171c; }
.chart-container {
background: #212226;
border-radius: 12px;
padding: 10px;
margin-bottom: 15px;
}
.well, .panel, .form-control { border-radius: 6px; }
.highcharts-title, .highcharts-subtitle {
font-family: 'Roboto', sans-serif;
font-weight: 500;
color: #ffffff !important;
}
"))),
titlePanel(
div(
style="color:#ffffff; font-family: 'Roboto', sans-serif; font-size:32px; font-weight:600;",
)
),
sidebarLayout(
sidebarPanel(
selectizeInput(
"genreInput", "Select Genre:",
choices = all_genres,
selected = "Drama",
options = list(
placeholder = "Type or select a genre...",
maxOptions = 30
)
),
sliderInput(
"ratingInput", "IMDB Rating:",
min = 7, max = 10, value = c(8, 10), step = 0.1
),
style = "background-color: #212226; color: #ffffff; border-radius: 8px; margin-bottom: 12px;"
),
mainPanel(
fluidRow(
column(6,
div(class = "chart-container", highchartOutput("barPlot", height = "400px"))
),
column(6,
div(class = "chart-container", highchartOutput("linePlot", height = "400px"))
)
),
fluidRow(
column(6,
div(class = "chart-container", highchartOutput("histPlot", height = "400px"))
),
column(6,
div(class = "chart-container", highchartOutput("piePlot", height = "400px"))
)
)
)
)
)
server <- function(input, output) {
genre_filtered <- reactive({
imdb %>%
filter(str_detect(Genre, fixed(input$genreInput))) %>%
filter(IMDB_Rating >= input$ratingInput[1], IMDB_Rating <= input$ratingInput[2])
})
output$barPlot <- renderHighchart({
top_directors <- genre_filtered() %>%
group_by(Director) %>%
summarize(n = n()) %>%
arrange(desc(n)) %>%
slice_head(n=10)
custom_colors <- viridis::viridis(10, option = "D", end = 0.85)
highchart() %>%
hc_chart(type = "bar", backgroundColor = "#212226") %>%
hc_add_series(
data = top_directors$n,
name = "Number of Movies",
colorByPoint = TRUE,
colors = custom_colors,
borderColor = "none",
borderWidth = 0
) %>%
hc_xAxis(
categories = top_directors$Director,
title = list(text = "Director", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_yAxis(
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_title(text = paste("Top Directors in", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$linePlot <- renderHighchart({
avg_rating_year <- genre_filtered() %>%
group_by(Released_Year) %>%
summarize(Avg_Rating = mean(IMDB_Rating, na.rm=TRUE))
highchart() %>%
hc_chart(type = "line", backgroundColor = "#212226") %>%
hc_add_series(
data = avg_rating_year$Avg_Rating,
name = "Average Rating",
color = "#00b374"  # Neon blue color
) %>%
hc_xAxis(
categories = avg_rating_year$Released_Year,
title = list(text = "Year", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_yAxis(
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_title(text = paste("Yearly Avg Rating for", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$histPlot <- renderHighchart({
req(nrow(genre_filtered()) > 0)
breaks <- seq(floor(min(genre_filtered()$IMDB_Rating, na.rm=TRUE)),
ceiling(max(genre_filtered()$IMDB_Rating, na.rm=TRUE)), by = 0.2)
hist_data <- hist(genre_filtered()$IMDB_Rating, breaks = breaks, plot = FALSE)
custom_hist_colors <- viridis::viridis(length(hist_data$counts), option = "D", end = 0.85)
highchart() %>%
hc_chart(type = "column", backgroundColor = "#212226") %>%
hc_add_series(
data = hist_data$counts,
name = "Count",
colorByPoint = TRUE,
colors = custom_hist_colors,
borderColor = "none",
borderWidth = 0,
pointPadding = 0,
groupPadding = 0
) %>%
hc_xAxis(
categories = round(hist_data$mids, 2),
title = list(text = "IMDB Rating", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_yAxis(
title = list(text = "Count", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_title(text = paste("Rating Distribution for", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$piePlot <- renderHighchart({
neon_cols <- c(
"Excellent" = "#cc353c",
"Great"     = "#5e0414",
"Good"      = "#c701ae",
"Others"    = "#747474"
)
dist <- genre_filtered() %>%
count(Rating_Level, name = "y") %>%
arrange(factor(Rating_Level, levels = names(neon_cols))) %>%
mutate(
name  = Rating_Level,
color = neon_cols[Rating_Level]
)
highchart() %>%
hc_chart(type = "pie", backgroundColor = "#212226") %>%
hc_add_series(
data = list_parse(dist),
colorByPoint = FALSE,
borderColor = "none",
borderWidth = 0
) %>%
hc_title(
text  = paste("Rating Level Distribution in", input$genreInput),
style = list(color = "white")
) %>%
hc_add_theme(hc_theme_flat())
})
}
shinyApp(ui, server)
library(flexdashboard)
library(tidyverse)
library(highcharter)
library(gt)
library(htmltools)
library(viridis)
library(dplyr)
library(shiny)
library(dplyr)
library(stringr)
library(highcharter)
library(viridis)
library(tidyr)
library(bslib)
# Helper: assign rating levels for pie chart
get_rating_level <- function(rating) {
if (rating >= 9) return("Excellent")
if (rating >= 8) return("Great")
if (rating >= 7) return("Good")
return("Others")
}
imdb$Rating_Level <- sapply(imdb$IMDB_Rating, get_rating_level)
# Unique genres for dropdown
all_genres <- sort(unique(unlist(strsplit(paste(imdb$Genre, collapse = ", "), ", "))))
ui <- fluidPage(
theme = bs_theme(
version = 5,
bootswatch = "flatly",
base_font = font_google("Roboto"),
primary = "#21908CFF"
),
tags$head(tags$style(HTML("
body { background: #16171c; }
.main-panel { background: #16171c; }
.chart-container {
background: #212226;
border-radius: 12px;
padding: 10px;
margin-bottom: 15px;
}
.well, .panel, .form-control { border-radius: 6px; }
.highcharts-title, .highcharts-subtitle {
font-family: 'Roboto', sans-serif;
font-weight: 500;
color: #ffffff !important;
}
"))),
titlePanel(
div(
style="color:#ffffff; font-family: 'Roboto', sans-serif; font-size:32px; font-weight:600;",
)
),
sidebarLayout(
sidebarPanel(
selectizeInput(
"genreInput", "Select Genre:",
choices = all_genres,
selected = "Drama",
options = list(
placeholder = "Type or select a genre...",
maxOptions = 30
)
),
sliderInput(
"ratingInput", "IMDB Rating:",
min = 7, max = 10, value = c(8, 10), step = 0.1
),
style = "background-color: #212226; color: #ffffff; border-radius: 8px; margin-bottom: 12px;"
),
mainPanel(
fluidRow(
column(6,
div(class = "chart-container", highchartOutput("barPlot", height = "400px"))
),
column(6,
div(class = "chart-container", highchartOutput("linePlot", height = "400px"))
)
),
fluidRow(
column(6,
div(class = "chart-container", highchartOutput("histPlot", height = "400px"))
),
column(6,
div(class = "chart-container", highchartOutput("piePlot", height = "400px"))
)
)
)
)
)
server <- function(input, output) {
genre_filtered <- reactive({
imdb %>%
filter(str_detect(Genre, fixed(input$genreInput))) %>%
filter(IMDB_Rating >= input$ratingInput[1], IMDB_Rating <= input$ratingInput[2])
})
output$barPlot <- renderHighchart({
top_directors <- genre_filtered() %>%
group_by(Director) %>%
summarize(n = n()) %>%
arrange(desc(n)) %>%
slice_head(n=10)
custom_colors <- viridis::viridis(10, option = "D", end = 0.85)
highchart() %>%
hc_chart(type = "bar", backgroundColor = "#212226") %>%
hc_add_series(
data = top_directors$n,
name = "Number of Movies",
colorByPoint = TRUE,
colors = custom_colors,
borderColor = "none",
borderWidth = 0
) %>%
hc_xAxis(
categories = top_directors$Director,
title = list(text = "Director", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_yAxis(
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_title(text = paste("Top Directors in", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$linePlot <- renderHighchart({
avg_rating_year <- genre_filtered() %>%
group_by(Released_Year) %>%
summarize(Avg_Rating = mean(IMDB_Rating, na.rm=TRUE))
highchart() %>%
hc_chart(type = "line", backgroundColor = "#212226") %>%
hc_add_series(
data = avg_rating_year$Avg_Rating,
name = "Average Rating",
color = "#00b374"  # Neon blue color
) %>%
hc_xAxis(
categories = avg_rating_year$Released_Year,
title = list(text = "Year", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_yAxis(
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_title(text = paste("Yearly Avg Rating for", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$histPlot <- renderHighchart({
req(nrow(genre_filtered()) > 0)
breaks <- seq(floor(min(genre_filtered()$IMDB_Rating, na.rm=TRUE)),
ceiling(max(genre_filtered()$IMDB_Rating, na.rm=TRUE)), by = 0.2)
hist_data <- hist(genre_filtered()$IMDB_Rating, breaks = breaks, plot = FALSE)
custom_hist_colors <- viridis::viridis(length(hist_data$counts), option = "D", end = 0.85)
highchart() %>%
hc_chart(type = "column", backgroundColor = "#212226") %>%
hc_add_series(
data = hist_data$counts,
name = "Count",
colorByPoint = TRUE,
colors = custom_hist_colors,
borderColor = "none",
borderWidth = 0,
pointPadding = 0,
groupPadding = 0
) %>%
hc_xAxis(
categories = round(hist_data$mids, 2),
title = list(text = "IMDB Rating", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#333333"
) %>%
hc_yAxis(
title = list(text = "Count", style = list(color = "#ffffff")),
labels = list(style = list(color = "#ffffff")),
gridLineColor = "#212226"
) %>%
hc_title(text = paste("Rating Distribution for", input$genreInput), style = list(color = "white")) %>%
hc_add_theme(hc_theme_flat())
})
output$piePlot <- renderHighchart({
neon_cols <- c(
"Excellent" = "#cc353c",
"Great"     = "#5e0414",
"Good"      = "#c701ae",
"Others"    = "#747474"
)
dist <- genre_filtered() %>%
count(Rating_Level, name = "y") %>%
arrange(factor(Rating_Level, levels = names(neon_cols))) %>%
mutate(
name  = Rating_Level,
color = neon_cols[Rating_Level]
)
highchart() %>%
hc_chart(type = "pie", backgroundColor = "#212226") %>%
hc_add_series(
data = list_parse(dist),
colorByPoint = FALSE,
borderColor = "none",
borderWidth = 0
) %>%
hc_title(
text  = paste("Rating Level Distribution in", input$genreInput),
style = list(color = "white")
) %>%
hc_add_theme(hc_theme_flat())
})
}
shinyApp(ui, server)
install.packages("tm")
install.packages("NLP")
install.packages("SnowballC")
install.packages("slam")
library(tm)
library(SnowballC)
library(slam)
doc1 <- "Stray cats are running all over the place. I see 10 a day!"
doc2 <- "Cats are killers. They kill billions of animals a year."
doc3 <- "The best food in Columbus, OH is   the North Market."
doc4 <- "Brand A is the best tasting cat food around. Your cat will love it."
doc5 <- "Buy Brand C cat food for your cat. Brand C makes healthy and happy cats."
doc6 <- "The Arnold Classic came to town this weekend. It reminds us to be healthy."
doc7 <- "I have nothing to say. In summary, I have told you nothing."
doc.list <- list(doc1, doc2, doc3, doc4, doc5, doc6, doc7)
N.docs <- length(doc.list)
names(doc.list) <- paste0("doc", c(1:N.docs))
query <- "Healthy cat food"
my.docs <- VectorSource(c(doc.list, query))
my.docs$Names <- c(names(doc.list), "query")
my.corpus <- Corpus(my.docs)
my.corpus
getTransformations()
my.corpus <- tm_map(my.corpus, removePunctuation)
content(my.corpus[[1]])
my.corpus <- tm_map(my.corpus, stemDocument)
content(my.corpus[[1]])
my.corpus <- tm_map(my.corpus, removeNumbers)
my.corpus <- tm_map(my.corpus, content_transformer(tolower))
my.corpus <- tm_map(my.corpus, stripWhitespace)
content(my.corpus[[1]])
tfidf.matrix <- t(apply(term.doc.matrix, 1,
FUN = function(row) {get.tf.idf.weights(row)}))
